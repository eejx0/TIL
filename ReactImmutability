# 리액트 불변성
### 🗣 불변성

---

> 값이나 상태를 변경할 수 없는 것 → readonly
> 

```tsx
const [position, setPosition] = useState({x: 0, y: 0});
position.x = 5 
// 이렇게 객체 내부의 값을 직접 수정하면 react가 상태가 변경된 걸 감지하지 못할 수 있음
// 그러면 UI가 다시 렌더링되지 않아서 상태가 변경되었음에도 화면이 업데이트되지 않는 문제 생김
```

- setPosition을 사용해야 함
    
    ```tsx
    setPosition(prevPosition => ({
    	...prevPosition,
    	x: 5
    }));
    ```
    

→ 외부에 존재하는 원본 데이터를 직접 수정하지 않고 원본 데이터의 복사본을 만들어 값을 사용

→ 불변성을 지켜줌으로써 `side-effect` 방지

리액트는 상태 값을 업데이트 할 때 객체의 속성 하나하나를 비교하는게 아니라 **참조값만 비교**해 상태 변화를 감지

Objext나 Array의 원본 속성이나 값을 직접 바꾸면 **React에서 상태가 바뀌었다고 파악하지 못하**기 때문에 **불변성을 지키는 업데이트**가 필요

### 🗣 어떻게?

---

<aside>
☝🏻

**spread 연산자**

---

- spread를 사용해 객체를 얕은 복사하면 객체 주소가 달라져 불변성을 유지할 수 있음
- 중첩 객체에선 불변성 유지 ❌
</aside>

<aside>
✌🏻

**Object.assign 메서드**

---

- 얕은 복사
- 반복문 없이 간단히 객체 복사
</aside>

<aside>
💬

**그 외**

---

- Immer.js (불변성 관리 라이브러리) 사용
- lodash의 _.cloneDeep() 같은 깊은 복사를 지원하는 라이브러리 사용
- 배열에선 push, splice같은 원본 데이터를 변경하는 메서드보다 concat, filter, map, slice 사용
</aside>
